//Find out put below programs with your comments of understanding of answer.

1.#include <stdio.h>
#define PRINT(i, limit) do 
                        { 
                            if (i++ < limit) 
                            { 
                                printf("GeeksQuizn"); 
                                continue; 
                            } 
                        }while(1)
 
int main()
{
    PRINT(0, 3);
    return 0;
}
/*code output*/
/*This code will results in error because any space or new line in macrobody will not be considered.
the error is as follows
/tmp/qsxGdiwk8H.c:3:25: error: expected identifier or '(' before '{' token
    3 |                         {
      |                         ^
/tmp/qsxGdiwk8H.c:9:26: error: expected identifier or '(' before 'while'
    9 |                         }while(1)
      |   ^~~~~
2 | #define PRINT(i, limit) do { if (i++ < limit) { printf("GeeksQuizn"); continue; } }while(1)
      |                                   ^~
Explaination: It also states lvalue required as increment operator,i.e In main block, we need to mention two variable repesenting macro variables. Since they are not mentioned it is given an error.
*/


2.#include <stdio.h>
#define macro(n, a, i, m) m##a##i##n
#define MAIN macro(n, a, i, m)
 
int MAIN()
{
    printf("GeeksQuiz");
    return 0;
}
/*It outputs the string "GeeksQuiz".
Here the m##a##i##n is used in the place of macro(n,a,i,m) which itself can be used in the place of Main.*/

3.
Which one of the following is invalid macro in C programming?
(A) #pragma
(B) #error
(C) #ifndef
(D) #elseif
/*elseif is an invalid macro in c programming. the correct macro is #elif*/

4.#include<stdio.h>
# define loop while(true)
int main()
{
	loop;  
	printf("preprocessor-aptitude");
	return 0;
}
/*this raises an error because here true is undeclared in macrobody*/, to represent a infinite loop we need to replace true with value 1. Then loop statement runs infinte loop there.*/


5.#include<stdio.h>
# define x - -5
int main()
{
	printf("%d",x);
	return 0;
}


6.#include<stdio.h>
#define a =
int main()
{
	int num a 6;
	printf("%d",num);
	return 0;
}
/* here macroname a is replaced with macrobody "=" operator in main block. Then num variable is assigned with value 6. The ouput is "6"*/

7.#include<stdio.h>
int main()
{
	char DATE[15] = "Current Date";
	printf("%s\n", __DATE__ );
	return 0;
}
/*It outputs the current date in form of "Mmm dd yyyy". __DATE__ is a character string literal containing the date when source file was compiled.The value of __DATE__ changes as the compiler processes any include files that are part of the source program. */

8.#include<stdio.h>
# define puts  "%s C preprocessor"
int main()
{
	printf(puts, puts);
	return 0;
}
/* The output is - %s C preprocessor C preprocessor. It puts "%s C preprocessor" in place of puts in main block. Then in printf statement %s is replaced with ""%s C preprocessor".*/

9. __________ is the Preprocessor directive which is used to end the scope of #ifdef.
a) #elif
b) #ifndef
c) #endif
d) #if


10.What is a Pragma in C language?
a) A Pragma may be an instruction to build tool to process or generate comments
b) A Pragma may be an instruction to compiler to execute specific functions at specific times say startup or exit of program.
c) A pragma may be an instruction to tell compiler to ignore certain warnings.
d) All the above
